#Focus more on code completion and fixes

#Code Completion #1
#The function sum_positive_numbers should return the sum of #
#all positive numbers between the number n received and 1. For example,#
#when n is 3 it should return 1+2+3=6,# 
#and when n is 5 it should return 1+2+3+4+5=15. Fill in the gaps to make this work:#


#Original code
def sum_positive_numbers(n):
    # The base case is n being smaller than 1
    if n < 1:
        return ___

    # The recursive case is adding this number to 
    # the sum of the numbers smaller than this one.
    return ___ + sum_positive_numbers(___)

print(sum_positive_numbers(3)) # Should be 6
print(sum_positive_numbers(5)) # Should be 15

#Corrected code
def sum_positive_numbers(n):
    # The base case is n being smaller than 1
    if n < 1:
        return 0 #Use zero because you want it to include the number in the 1st position (python starts at 0)

    # The recursive case is adding this number to 
    # the sum of the numbers smaller than this one.
    return n + sum_positive_numbers(n-1)

print(sum_positive_numbers(3)) # Should be 6
print(sum_positive_numbers(5)) # Should be 15

#Code Fix #1
#In the provided code, the count_users function uses recursion to 
#count the number of users that belong to a group within a company's 
#system. It does this by iterating through each member of a group, and 
#if a member is another group, it recursively calls count_users to count the 
#users within that subgroup. However, there is a bug in the code! 


#Original Code
def count_users(group):
  count = 0
  for member in get_members(group):
    count += 1
    if is_group(member):
      count += count_users(member)-1
  return count

#Output
print(count_users("sales")) # Should be 3
print(count_users("engineering")) # Should be 8
print(count_users("everyone")) # Should be 18

#Corrected Code
def count_users(group):
  count = 0
  for member in get_members(group):
    count += 1
    if is_group(member):
      count += count_users(member)-1 #--> need to decrease by 1 b/c you are only counding the unique people (so if in another group, not counted)
  return count

#Output
print(count_users("sales")) # Should be 3
print(count_users("engineering")) # Should be 8
print(count_users("everyone")) # Should be 18

#Code Fix 2

#Rewrite the while function used to calculate the sum of all positive numbers between 1 and n 
#using recursion (when n<1, return 0)

def sum_positive_numbers(n):
    if n < 1:
        return 0
    return n + sum_positive_numbers(n-1)

#Output
print(sum_positive_numbers(3)) # Should be 6
print(sum_positive_numbers(5)) # Should be 15

#Additional practice-->solved Day 5-6
# return whether the number is a power of the given base. 
def is_power_of(number, base):
 # Base case: when number is smaller than base.
    if number < base:
        # If number is equal to 1, it's a power (base**0).
        return __

    # Recursive case: keep dividing number by base.
    return is_power_of(__, ___)


print(is_power_of(8,2))     # Should be True
print(is_power_of(64,4))    # Should be True
print(is_power_of(70,10))   # Should be False

#Code Creation
#Create a function should count down from the “start” to “stop” 
#variables when “start” is bigger than “stop”. Otherwise, it should count up from “start” to “stop”. 

def counter(start, stop):
    return_string = "" #Need to declare the variable
    if start > stop:
        return_string = "Counting down: "
        while start >= stop: # Complete the while loop
            return_string += str(start) # Add the numbers to the "return_string" ->make the numbers a string
            if start > stop:
                return_string += ","
            start -= 1 # Decrement the appropriate variable
    else:
        return_string = "Counting up: "
        while start <= stop: # Complete the while loop
            return_string += str(start) # Add the numbers to the "return_string"->make the numbers a string
            if start < stop:
                return_string += ","
            start += 1  # Increment the appropriate variable
    return return_string


print(counter(1, 10)) # Should be "Counting up: 1,2,3,4,5,6,7,8,9,10"
print(counter(2, 1)) # Should be "Counting down: 2,1"
print(counter(5, 5)) # Should be "Counting up: 5"