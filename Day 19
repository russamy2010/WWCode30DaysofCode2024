#Attended Python Class and Completed Google Adv. Analytics training
#Create code that pulls the login and logout information of users currently in a system and prints a report

#Step 1: get the event information--login and logout-->helper function to sort list
def get_event_date(event):
	return event.date

#Step 2: get information for machines and users-->processing function and create dictionary
def current_users(events):
    events.sort(key=get_event_date) #pass the function created in step 1 as key
    machines = {}
    for event in events:
        if event.machine not in machines:
            machines[event.machine] = set()
        if event.type == "login":
            machines[event.machine].add(event.user)
        elif event.type == "logout":
            machines[event.machine].remove(event.user)
    return machines

#Step 3: create the report
def generate_report(machines):
    for machine, users in machines.items():
        if len (users) > 0: #ensures that machines w/out users currently are not printed
            user_list = ",".join(users)
            print("{}: {}".format(machine, user_list))

#Step 4: test and print report
class Event: #create event class
  def __init__(self, event_date, event_type, machine_name, user):
    self.date = event_date
    self.type = event_type
    self.machine = machine_name
    self.user = user


events = [ #create events
  Event('2020-01-21 12:45:46', 'login', 'myworkstation.local', 'jordan'),
  Event('2020-01-22 15:53:42', 'logout', 'webserver.local', 'jordan'),
  Event('2020-01-21 18:53:21', 'login', 'webserver.local', 'lane'),
  Event('2020-01-22 10:25:34', 'logout', 'myworkstation.local', 'jordan'),
  Event('2020-01-21 08:20:01', 'login', 'webserver.local', 'jordan'),
  Event('2020-01-23 11:24:35', 'login', 'mailserver.local', 'chris'),
]

users = current_users(events) #feed events
print(users)

generate_report(users) #print report