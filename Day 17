#Took a break and focused on Cybesecurity (finished it)

#Code Completion #1

def get_word(sentence, n):
			    # Only proceed if n is positive 
			    if n > 0:
			        words = _
			        # Only proceed if n is not more than the number of words 
			        if n <= len(words):
			            return words()
			    return("")
			print(get_word("This is a lesson about lists", 4)) # Should print: lesson
			print(get_word("This is a lesson about lists", -4)) # Nothing
			print(get_word("Now we are cooking!", 1)) # Should print: Now
			print(get_word("Now we are cooking!", 5)) # Nothing
			
#Complete code

			def get_word(sentence, n):
			    # Only proceed if n is positive 
			    if n > 0:
			        words = sentence.split() #For line 4, split the sentence (it is a completed by calling the sentence string#
			        # Only proceed if n is not more than the number of words 
			        if n <= len(words):
			            return words[n-1] #This ensures that n is not more than the number of words
			    return("")

        #Responses
			#print(get_word("This is a lesson about lists", 4)) # Should print: lesson
			#print(get_word("This is a lesson about lists", -4)) # Nothing
			#print(get_word("Now we are cooking!", 1)) # Should print: Now
			#print(get_word("Now we are cooking!", 5)) # Nothing

#Code Completion #2

def file_size(file_info):
	___, ___, ___= file_info
	return("{:.2f}".format(___ / 1024))

print(file_size(('Class Assignment', 'docx', 17875))) # Should print 17.46
#print(file_size(('Notes', 'txt', 496))) # Should print 0.48
#print(file_size(('Program', 'py', 1239))) # Should print 1.21

#Complete code
def file_size(file_info):
	file_name, file_type, file_bytes= file_info
	return("{:.2f}".format(file_bytes / 1024))

#print(file_size(('Class Assignment', 'docx', 17875))) # Should print 17.46
#print(file_size(('Notes', 'txt', 496))) # Should print 0.48
#print(file_size(('Program', 'py', 1239))) # Should print 1.21

#Code Challenge
#Write a code that has the name of a person, and their email (with the email in <>)

def emails(people):
	result=[]
	for name, email in people: 
		result.append("{} <{}>".format(name,email))
	return result
print(emails([("first@example.com,", "First Person", "second@example.com", "Second Person")]))
	